{
	"openapi": "3.0.3",
	"info": {
		"title": "Impacta",
		"version": "1.0.0",
		"description": "Impacta backend challange"
	},
	"components": {
		"schemas": {
			"Product": {
				"type": "object",
				"properties": {
					"id": {
						"type": "number",
						"description": "Auto generated id of the product",
						"readOnly": true
					},
					"name": {
						"type": "string",
						"description": "Name of the product"
					},
					"description": {
						"type": "string",
						"description": "A beautiful description of the product"
					},
					"priceBRL": {
						"type": "number",
						"description": "Price of the product in BRL"
					},
					"createdAt": {
						"type": "string",
						"description": "The auto generated time the product was created",
						"readOnly": true
					},
					"updatedAt": {
						"type": "string",
						"description": "The auto generated time the product was updated",
						"readOnly": true
					},
					"priceUSD": {
						"type": "number",
						"description": "Price of the product in USD",
						"readOnly": true
					},
					"priceEUR": {
						"type": "number",
						"description": "Price of the product in EUR",
						"readOnly": true
					}
				},
				"required": [
					"name",
					"description",
					"priceBRL"
				  ],
				"example": {
					"id": 1,
 					"name": "First Product",
 					"description": "A cool and detailed description of the First Product",
 					"priceBRL": 20.89,
 					"createdAt": "2023-01-05T09:57:22.084Z",
 					"updatedAt": "2023-01-05T09:57:22.084Z",
 					"priceUSD": 4,
 					"priceEur": 3.76
				}
			},
			"Currency": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string",
						"description": "Currency code for the currency being discussed",
						"readOnly": true
					},
					"codein": {
						"type": "string",
						"description": "Currency code for the currency being used as the reference. In this case, it is BRL for Brazilian Real",
						"readOnly": true
					},
					"name": {
						"type": "string",
						"description": "Name of the currency pair, combining the names of the currency being discussed and the reference currency",
						"readOnly": true
					},
					"high": {
						"type": "string",
						"description": "Highest value that the currency being discussed has reached in relation to the reference currency",
						"readOnly": true
					},
					"low": {
						"type": "string",
						"description": "Lowest value that the currency being discussed has reached in relation to the reference currency",
						"readOnly": true
					},
					"varBid": {
						"type": "string",
						"description": "Change in value of the currency being discussed in relation to the reference currency",
						"readOnly": true
					},
					"pctChange": {
						"type": "string",
						"description": "Percentage change in value of the currency being discussed in relation to the reference currency",
						"readOnly": true
					},
					"bid": {
						"type": "string",
						"description": "Current bid price for the currency being discussed in relation to the reference currency",
						"readOnly": true
					},
					"ask": {
						"type": "string",
						"description": "Current ask price for the currency being discussed in relation to the reference currency",
						"readOnly": true
					},
					"timestamp": {
						"type": "string",
						"description": "Timestamp representing the time at which this data was collected",
						"readOnly": true
					},
					"create_date": {
						"type": "string",
						"description": "Date on which this Data was collected",
						"readOnly": true
					}
				},
				"example": {
					"code": "USD",
    				"codein": "BRL",
    				"name": "DÃ³lar Americano/Real Brasileiro",
    				"high": "5.3689",
    				"low": "5.2186",
    				"varBid": "-0.125",
					"pctChange": "-2.34",
					"bid": "5.2254",
					"ask": "5.2264",
					"timestamp": "1673040579",
					"create_date": "2023-01-06 18:29:39"
				}
			}
		}
	},
	"paths": {
		"/Products": {
			"get": {
				"tags": ["Products"],
				"summary": "Return all products",
				"operationId": "getAllProducts",
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Product"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Products"],
				"summary": "Create a new product",
				"operationId": "createProduct",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"example": {
									 "name": "New Product",
									 "description": "A cool description of the New Product",
									 "priceBRL": 10.00
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successfully created",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "string",
											"example": "Product created"
										},
										"productInfo": {
											"$ref": "#/components/schemas/Product"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Validation error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Validation error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/Products/{id}": {
			"get": {
				"tags": ["Products"],
				"summary": "Return selected product by id",
				"operationId": "getOneProduct",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the product to retrieve",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							}
						}
					},
					"404": {
						"description": "Product not found",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Product with specified ID not found"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Products"],
				"summary": "Update a product",
				"operationId": "editProduct",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Update selected product by id",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"example": {
									"name": "Product ready to be updated",
									"description": "A description ready to be updated",
									"priceBRL": 10.00
							   }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "string",
											"example": "Product updated"
										},
										"productInfo": {
											"$ref": "#/components/schemas/Product"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request - Validation error",
						"content": {
							"application/json": {
								"schema": {
								"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Validation error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Product not found",
						"content": {
							"application/json": {
								"schema": {
								"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Product with specified ID not found"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Products"],
				"summary": "Delete a product",
				"operationId": "deleteProduct",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the product to delete",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Product deleted",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"success": {
											"type": "string",
											"example": "Product deleted"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Product not found",
						"content": {
							"application/json": {
								"schema": {
								"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Product with specified ID not found"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/Currency": {
			"get": {
				"tags": ["Currency"],
				"summary": "Return all currencies",
				"operationId": "getCurrencies",
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Currency"
									}
								}
							}
						}
					}
				}
			}
		},
		"/Currency/{symbol}": {
			"get": {
				"tags": ["Currency"],
				"summary": "Return selected currency",
				"operationId": "getSpecificCurrency",
				"parameters": [
					{
						"name": "symbol",
						"in": "path",
						"description": "Symbol of the currency to retrieve",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Currency"
								}
							}
						}
					},
					"404": {
						"description": "Currency not found",
						"content": {
							"application/json": {
								"schema": {
								"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"example": "Currency with specified symbol was not found"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}